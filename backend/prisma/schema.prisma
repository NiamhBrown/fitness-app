// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
model User {
  id        String   @id
  email     String?   @unique
  firstName String?
  lastName  String?
  createdAt     DateTime      @default(now())     
  updatedAt     DateTime      @updatedAt          

  // Relations
  exerciseLogs  ExerciseLog[]                     // One user -> many logs
  personalBest  PersonalBest[]
  }

model Exercise {
  id            String        @id @default(uuid()) // Primary key
  name          String          @unique                   
  description   String?                            
  muscleGroup   String?                            
  createdAt     DateTime      @default(now())

  // Relations
  exerciseLogs  ExerciseLog[]                      // One exercise -> many logs
  personalBest  PersonalBest[]
  WorkoutExercise WorkoutExercise[]
  WorkoutLogExercise WorkoutLogExercise[]
}

model ExerciseLog {
  id         String   @id @default(uuid())
  userId     String
  exerciseId String
  date       DateTime
  setNumber  Int
  reps       Int
  weight     Float

  user       User      @relation(fields: [userId], references: [id])
  exercise   Exercise  @relation(fields: [exerciseId], references: [id])

  //relations 
personalBest PersonalBest[] 
}

model PersonalBest {
  id         String   @id @default(uuid())
  userId     String 
  exerciseId String 
  reps       Int
  weight     Float
  date       DateTime
  sourceLogId  String?     @unique  // links back to the exact ExerciseLog row

  user       User      @relation(fields: [userId], references: [id])
  exercise   Exercise  @relation(fields: [exerciseId], references: [id])
  sourceLog  ExerciseLog? @relation(fields: [sourceLogId], references: [id])

  @@unique([userId, exerciseId]) // Ensures one PB per user + exercise
}

// tables for MVP 2 
model Workout {
  id          String   @id @default(uuid())
  name        String
  description String?
  userId      String?
  createdAt   DateTime @default(now())
  exercises   WorkoutExercise[]
  logs        WorkoutLog[]
}

model WorkoutExercise {
  id          String   @id @default(uuid())
  workoutId   String
  exerciseId  String
  order       Int?
  Workout     Workout  @relation(fields: [workoutId], references: [id])
  Exercise    Exercise @relation(fields: [exerciseId], references: [id])
}

model WorkoutLog {
  id         String   @id @default(uuid())
  workoutId  String
  userId     String
  date       DateTime @default(now())
  exercises  WorkoutLogExercise[]
  Workout    Workout  @relation(fields: [workoutId], references: [id])
}

model WorkoutLogExercise {
  id             String   @id @default(uuid())
  workoutLogId   String
  exerciseId     String
  sets           Json
  WorkoutLog     WorkoutLog @relation(fields: [workoutLogId], references: [id])
  Exercise       Exercise   @relation(fields: [exerciseId], references: [id])
}
